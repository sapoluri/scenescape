#!/usr/bin/env python3
from io import SEEK_SET
import os
from os.path import exists
import subprocess
import sys
import argparse
from check_common import *

TEST_NAME = "NEX-T10511"

def build_argparser():
  parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  parser.add_argument("--ignore", nargs="*",
                      help="list of files and directories to ignore when checking")
  return parser

def is_in_subdir(path, subdirs):
  for sub in subdirs:
    fpath = os.path.realpath(path)
    fdir = os.path.realpath(sub)
    relative = os.path.relpath(fpath, start=fdir)
    if not relative.startswith(os.pardir):
      return True
  return False

def main():
  args = build_argparser().parse_args()

  ignore_files = []
  ignore_dirs = []

  if args.ignore is not None:
    for path in args.ignore:
      if not os.path.exists(path):
        print("No such file or directory to ignore:", path)
      elif os.path.isdir(path):
        ignore_dirs.append(path)
      else:
        ignore_files.append(os.path.abspath(path))

  print("IGNORE", ignore_files)
  print("IGNOREDIRS", ignore_dirs)
  cmd = ["git", "ls-tree", "--full-tree", "-r", "--name-only", "--full-name", "HEAD"]
  process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
  pstr = process.stdout.read()
  process.stdout.close()
  allfiles = pstr.decode("utf-8").split('\n')

  fail_count = 0

  for path in allfiles:
    if not len(path):
      continue

    path = os.path.realpath(path)
    if os.path.isfile(path):
      if path in ignore_files or is_in_subdir(path, ignore_dirs):
        continue

      process = subprocess.Popen(['file', '--mime', path],
                                 stdout=subprocess.PIPE, stderr=subprocess.PIPE)
      out, err = process.communicate()
      out = out.decode(encoding)
      if 'charset=binary' not in out:
        if not checkNewline(path):
          fail_count += 1
          print("Missing newline at end:", path)

        correct = checkTrailingWhitespace(path)
        if correct != WHITESPACE_CORRECT:
          fail_count += 1
          if correct == WHITESPACE_DOS:
            print("DOS newlines:", path)
          else:
            print("Trailing whitespace:", path)

        correct = checkTabs(path)
        if correct != WHITESPACE_CORRECT:
          fail_count += 1
          print("Contains tab characters:", path)

    elif not os.path.isdir(path):
      fail_count += 1
      print("Unable to read:", path)

  if fail_count == 0:
    print("Check Passed")
    print(TEST_NAME + ": PASS")
  else:
    print(TEST_NAME + ": FAIL")

  return min(fail_count, 1)

if __name__ == '__main__':
  exit(main() or 0)
