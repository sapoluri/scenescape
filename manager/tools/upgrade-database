#!/bin/bash

# Copyright (C) 2023 Intel Corporation
#
# This software and the related documents are Intel copyrighted materials,
# and your use of them is governed by the express license under which they
# were provided to you ("License"). Unless the License provides otherwise,
# you may not use, modify, copy, publish, distribute, disclose or transmit
# this software or the related documents without Intel's prior written permission.
#
# This software and the related documents are provided as is, with no express
# or implied warranties, other than those that are expressly stated in the License.

set -e

SCENESCAPE_IMAGE=scenescape-manager
DBDIR=db
MIGRATIONSDIR=migrations
SECRETSDIR=./manager/secrets
CHECK_ONLY=0
APPDIR=/workspace

# Check if database directories exist
if [ ! -d "${DBDIR}" ] || [ ! -d "${MIGRATIONSDIR}" ]; then
    echo "Database directories not found. No previous database installation detected."
    echo "No upgrade or migration needed."
    exit 0
fi

function wait_for_container()
{
  CONTAINERNAME=$1
  WAITFORSTRING=${2:-"Container is ready"}
  MAX_WAIT=60
  CUR_WAIT=0
  CONTAINER_READY=0
  while [ -z "$(docker ps -q -f name=^/${CONTAINERNAME}$ )" ]
  do
    sleep 1
    CUR_WAIT=$(( $CUR_WAIT+1 ))
    if [[ $CUR_WAIT -ge $MAX_WAIT ]]
    then
      echo "Error: Failed to start ${CONTAINERNAME} container."
      test_int
    fi
  done

  while true
  do
    if docker logs ${CONTAINERNAME} 2>&1 | grep -q "${WAITFORSTRING}"
    then
      CONTAINER_READY=1
      break
    fi
    sleep 1
    CUR_WAIT=$(( $CUR_WAIT+1 ))
    if [[ $CUR_WAIT -ge $MAX_WAIT ]]
    then
      docker logs ${CONTAINERNAME}
      echo "Warning: Failed detecting start of container $CONTAINERNAME."
      break
    fi
  done
}

while [ $# -gt 0 -a x$(expr substr "${1:-empty}" 1 2) = "x--" ] ; do
    case "$1" in
        --check)
            CHECK_ONLY=1
            shift
            ;;
    esac
done

NOW=$(date +"%y%m%d-%H%M%S")
PG_CONTAINER=pg_backup
PG_UID=$(stat -c '%u' ${DBDIR})
PG_DB_VERSION=$(cat ${DBDIR}/PG_VERSION)
PG_NEW_VERSION=$(docker run --rm ${SCENESCAPE_IMAGE} /bin/sh -c \
                 'echo -n PG_NEW_VERSION= ; ls /usr/lib/postgresql' \
                     | awk -F= '/PG_NEW_VERSION/{print $2}' | tr -d '\015')
if [ -z "${PG_NEW_VERSION}" ] ; then
    echo Unknown Postgres version
    exit 1
fi

if [ "${PG_NEW_VERSION}" -le "${PG_DB_VERSION}" ] ; then
    echo Postgres server version ${PG_NEW_VERSION} is not newer than existing database version ${PG_DB_VERSION}

    # Check if migration is needed for the same version
    docker run \
        --name ${PG_CONTAINER} \
        -d \
        --rm \
        --workdir ${APPDIR} \
        -v ${PWD}:${APPDIR} \
        -v ${SECRETSDIR}/django/secrets.py:/home/scenescape/SceneScape/manager/secrets.py \
        -v ${SECRETSDIR}/browser.auth:/run/secrets/browser.auth \
        -v ${SECRETSDIR}/calibration.auth:/run/secrets/calibration.auth \
        -v ${SECRETSDIR}/controller.auth:/run/secrets/controller.auth \
        -v ${SECRETSDIR}/percebro.auth:/run/secrets/percebro.auth \
        -v ${SECRETSDIR}/certs:/run/secrets/certs \
        -v ${SECRETSDIR}/ca:/run/secrets/ca \
        -v scenescape_vol-db:/workspace/db \
        -v scenescape_vol-migrations:/home/scenescape/SceneScape/sscape/migrations \
        -v scenescape_vol-migrations:/workspace/migrations \
        --privileged \
        -e PYTHONPATH=${APPDIR} \
        ${SCENESCAPE_IMAGE} \
        database
    wait_for_container ${PG_CONTAINER}

    MIGRATION_NEEDED=1
    if ! docker exec -it ${PG_CONTAINER} /bin/bash manager/tools/migration --check ; then
        echo No migration needed
        MIGRATION_NEEDED=0
    fi
    docker stop ${PG_CONTAINER}
    if [ ${MIGRATION_NEEDED} = 0 ] ; then
        exit 1
    fi
fi
if [ ${CHECK_ONLY} = 1 ] ; then
    exit 0
fi
# Create backup of the old database files
BACKUP=${DBDIR}-backup-${NOW}
mkdir ${BACKUP}
rsync -a ${DBDIR} ${MIGRATIONSDIR} ${BACKUP}/.
echo "Old database has been backed up to: ${BACKUP}"

DBPASS=$(sed -r -n -e "/DATABASE_PASSWORD=/s/.*'([^']+)'/\1/p" \
                 ${DBDIR}/../manager/secrets/django/secrets.py)

docker stop ${PG_CONTAINER} >/dev/null 2>&1 || true

# Make a copy of pg_hba.conf for the backup process
echo "Preparing database backup configuration..."
cp ${DBDIR}/pg_hba.conf ${BACKUP}/${DBDIR}/pg_hba.conf-orig
cat > ${BACKUP}/${DBDIR}/pg_hba.conf <<EOF
local all all trust
host all all 0.0.0.0/0 trust
EOF

# Start postgres container using version that matches existing database
echo "Starting PostgreSQL ${PG_DB_VERSION} container for backup..."
docker run \
       --name ${PG_CONTAINER} \
       --rm \
       -e POSTGRES_PASSWORD="${DBPASS}" \
       -e POSTGRES_USER=scenescape \
       -e POSTGRES_HOST_AUTH_METHOD=trust \
       -v ${PWD}/${BACKUP}/${DBDIR}:/var/lib/postgresql/data \
       --entrypoint="/bin/bash" \
       -d \
       postgres:${PG_DB_VERSION} \
       -c "usermod --uid=${PG_UID} postgres ; id postgres ; exec docker-entrypoint.sh postgres"

wait_for_container ${PG_CONTAINER} "database system is ready to accept connections"

# Create SQL backup of database
echo "Creating SQL backup of database..."
docker exec ${PG_CONTAINER} /bin/bash -c 'su postgres -c "pg_dump -U scenescape"' \
       > ${BACKUP}.psql
echo "SQL backup completed successfully."

docker stop ${PG_CONTAINER}

# Clean up any existing volumes to prepare for upgrade
echo "Preparing Docker volumes for upgraded database..."
docker volume rm scenescape_vol-db scenescape_vol-migrations 2>/dev/null || true
docker volume create scenescape_vol-db
docker volume create scenescape_vol-migrations
echo "Docker volumes created."

# Create temporary container to initialize the volumes with old data
echo "Initializing migration volume..."
TEMP_CONTAINER=init_volumes
docker run --name ${TEMP_CONTAINER} -d \
    -v ${PWD}/${MIGRATIONSDIR}:/source/migrations \
    -v scenescape_vol-migrations:/dest/migrations \
    alpine:latest sleep 60

# Copy data to volumes
docker exec ${TEMP_CONTAINER} /bin/sh -c "cp -r /source/migrations/* /dest/migrations/"
docker stop ${TEMP_CONTAINER}
docker rm ${TEMP_CONTAINER}

# Start postgres container using the volume and new postgres version
echo "Starting new PostgreSQL ${PG_NEW_VERSION} container..."
docker run \
       --name ${PG_CONTAINER} \
       --rm \
       -e POSTGRES_PASSWORD="${DBPASS}" \
       -e POSTGRES_USER=scenescape \
       -e POSTGRES_HOST_AUTH_METHOD=trust \
       -e LANG=C.UTF-8 \
       -v scenescape_vol-db:/var/lib/postgresql/data \
       --entrypoint="/bin/bash" \
       -d \
       postgres:${PG_NEW_VERSION} \
       -c "exec docker-entrypoint.sh postgres"

wait_for_container ${PG_CONTAINER} "database system is ready to accept connections"

# Create new version of database from backup of old database if needed
if [ "${PG_NEW_VERSION}" -gt "${PG_DB_VERSION}" ]; then
    docker cp ${BACKUP}.psql ${PG_CONTAINER}:/tmp/$(basename ${BACKUP}.psql)
    docker exec ${PG_CONTAINER} /bin/bash \
           -c "su postgres -c 'psql -U scenescape -d scenescape < /tmp/$(basename ${BACKUP}.psql)'"
fi

docker stop ${PG_CONTAINER}

# Run migration using volumes
docker run \
    --name ${PG_CONTAINER} \
    -d \
    --workdir ${APPDIR} \
    -v ${PWD}:${APPDIR} \
    -v ${SECRETSDIR}/django/secrets.py:/home/scenescape/SceneScape/manager/secrets.py \
    -v ${SECRETSDIR}/browser.auth:/run/secrets/browser.auth \
    -v ${SECRETSDIR}/calibration.auth:/run/secrets/calibration.auth \
    -v ${SECRETSDIR}/controller.auth:/run/secrets/controller.auth \
    -v ${SECRETSDIR}/percebro.auth:/run/secrets/percebro.auth \
    -v ${SECRETSDIR}/certs:/run/secrets/certs \
    -v ${SECRETSDIR}/ca:/run/secrets/ca \
    -v scenescape_vol-db:/workspace/db \
    -v scenescape_vol-migrations:/home/scenescape/SceneScape/sscape/migrations \
    -v scenescape_vol-migrations:/workspace/migrations \
    --privileged \
    -e PYTHONPATH=${APPDIR} \
    ${SCENESCAPE_IMAGE} \
    database

wait_for_container ${PG_CONTAINER}

docker exec -it ${PG_CONTAINER} /bin/bash manager/tools/migration
docker stop ${PG_CONTAINER}

echo "Old database has been backed up to: ${BACKUP}"
echo "                     SQL backup at: ${BACKUP}.psql"
echo
echo "Upgraded database for Postgres ${PG_NEW_VERSION} has been created in Docker volumes:"
echo "  - Database: scenescape_vol-db"
echo "  - Migrations: scenescape_vol-migrations"
